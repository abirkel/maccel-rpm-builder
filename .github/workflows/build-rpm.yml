name: Build RPM Packages

on:
  repository_dispatch:
    types: [build-for-kernel]
  workflow_dispatch:
    inputs:
      kernel_version:
        description: 'Kernel version (e.g., 6.11.5-300.fc41.x86_64)'
        required: true
        type: string
      fedora_version:
        description: 'Fedora version (e.g., 41)'
        required: true
        type: string
      force_rebuild:
        description: 'Force rebuild even if packages exist'
        required: false
        type: boolean
        default: false

env:
  KERNEL_VERSION: ${{ github.event.client_payload.kernel_version || inputs.kernel_version }}
  FEDORA_VERSION: ${{ github.event.client_payload.fedora_version || inputs.fedora_version }}
  TRIGGER_REPO: ${{ github.event.client_payload.trigger_repo || 'manual' }}
  FORCE_REBUILD: ${{ github.event.client_payload.force_rebuild || inputs.force_rebuild || false }}

jobs:
  validate-and-check:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      maccel_version: ${{ steps.version.outputs.maccel_version }}
      existing_release: ${{ steps.check.outputs.existing_release }}
      package_info: ${{ steps.check.outputs.package_info }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate kernel version format
        run: |
          if [[ ! "$KERNEL_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+-[0-9]+\.fc[0-9]+\.(x86_64|aarch64)$ ]]; then
            echo "Error: Invalid kernel version format: $KERNEL_VERSION"
            echo "Expected format: X.Y.Z-REL.fcN.ARCH (e.g., 6.11.5-300.fc41.x86_64)"
            exit 1
          fi
          echo "Kernel version format is valid: $KERNEL_VERSION"

      - name: Detect maccel version
        id: version
        run: |
          echo "Detecting maccel version using detection script..."
          
          # Use the dedicated version detection script
          MACCEL_VERSION=$(./scripts/detect-maccel-version.sh detect)
          COMMIT_HASH=$(./scripts/detect-maccel-version.sh commit-hash || echo "unknown")
          
          echo "Detected maccel version: $MACCEL_VERSION"
          echo "Source commit hash: $COMMIT_HASH"
          
          echo "maccel_version=$MACCEL_VERSION" >> $GITHUB_OUTPUT
          echo "source_commit=$COMMIT_HASH" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Check for existing packages
        id: check
        run: |
          echo "Checking for existing packages using detection script..."
          
          # Use the dedicated package detection script
          if ./scripts/check-existing-packages.sh check "$KERNEL_VERSION" "${{ steps.version.outputs.maccel_version }}" "$FORCE_REBUILD"; then
            echo "Packages are up-to-date, skipping build"
            echo "should_build=false" >> $GITHUB_OUTPUT
            
            # Get existing package information
            PACKAGE_INFO=$(./scripts/check-existing-packages.sh info "$KERNEL_VERSION" "${{ steps.version.outputs.maccel_version }}")
            EXISTING_RELEASE=$(echo "$PACKAGE_INFO" | jq -r '.release_tag')
            echo "existing_release=$EXISTING_RELEASE" >> $GITHUB_OUTPUT
            
            # Store package info for later use (escape for GitHub Actions)
            echo "package_info<<EOF" >> $GITHUB_OUTPUT
            echo "$PACKAGE_INFO" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            # Output package URLs for reference
            echo "Existing package URLs:"
            echo "$PACKAGE_INFO" | jq -r '.packages[] | "- \(.name): \(.url)"'
          else
            echo "Build is required (packages don't exist or source has changed)"
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "existing_release=" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ github.token }}

  build-packages:
    needs: validate-and-check
    if: needs.validate-and-check.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [kmod-maccel, maccel]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up build environment
        run: |
          echo "Setting up build environment for ${{ matrix.package }}"
          ./scripts/setup-build-environment.sh "$KERNEL_VERSION" "$FEDORA_VERSION" "${{ needs.validate-and-check.outputs.maccel_version }}"

      - name: Build ${{ matrix.package }} package
        run: |
          echo "Building ${{ matrix.package }} package"
          ./scripts/build-packages.sh "${{ matrix.package }}" "$KERNEL_VERSION" "${{ needs.validate-and-check.outputs.maccel_version }}" "$FEDORA_VERSION" "./packages"

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.package }}-${{ env.KERNEL_VERSION }}
          path: |
            packages/*.rpm
            packages/checksums.txt
            packages/build-info.json

  create-release:
    needs: [validate-and-check, build-packages]
    if: needs.validate-and-check.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create GitHub release
        run: |
          RELEASE_TAG="kernel-${KERNEL_VERSION}-maccel-${{ needs.validate-and-check.outputs.maccel_version }}"
          RELEASE_NAME="Kernel ${KERNEL_VERSION} - maccel ${{ needs.validate-and-check.outputs.maccel_version }}"
          
          echo "Creating release: $RELEASE_TAG"
          
          # Collect all RPM files and metadata
          find . -name "*.rpm" -exec cp {} . \;
          find . -name "checksums.txt" -exec cp {} . \;
          find . -name "build-info.json" -exec cp {} . \;
          
          # Create release notes
          cat > release_notes.md << 'EOF'
          RPM packages for maccel ${{ needs.validate-and-check.outputs.maccel_version }} built for kernel $KERNEL_VERSION

          ## Package Information
          - **Kernel Version**: $KERNEL_VERSION
          - **Maccel Version**: ${{ needs.validate-and-check.outputs.maccel_version }}
          - **Source Commit**: ${{ needs.validate-and-check.outputs.source_commit }}
          - **Build Date**: $(date -u +%Y-%m-%d)

          ## Packages Included
          - `kmod-maccel`: Kernel module for maccel driver
          - `maccel`: Userspace CLI tools and configuration

          ## Installation
          Download the RPM packages and install with:
          ```bash
          sudo dnf install ./kmod-maccel-*.rpm ./maccel-*.rpm
          ```

          ## Verification
          Package checksums are included in `checksums.txt`. Verify with:
          ```bash
          sha256sum -c checksums.txt
          ```
          EOF
          
          # Create release with packages and metadata
          gh release create "$RELEASE_TAG" \
            --title "$RELEASE_NAME" \
            --notes-file release_notes.md \
            --latest=false \
            *.rpm checksums.txt build-info.json
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Report build success
        run: |
          RELEASE_TAG="kernel-${KERNEL_VERSION}-maccel-${{ needs.validate-and-check.outputs.maccel_version }}"
          echo "âœ… Build completed successfully!"
          echo "Release: $RELEASE_TAG"
          echo "Packages available at: https://github.com/${{ github.repository }}/releases/tag/$RELEASE_TAG"

  report-existing:
    needs: validate-and-check
    if: needs.validate-and-check.outputs.should_build == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Report existing packages
        run: |
          echo "ðŸ“¦ Packages already exist for this configuration"
          echo "Release: ${{ needs.validate-and-check.outputs.existing_release }}"
          echo "Packages available at: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-and-check.outputs.existing_release }}"
          echo ""
          echo "Package Download URLs:"
          
          # Parse and display package information
          PACKAGE_INFO='${{ needs.validate-and-check.outputs.package_info }}'
          if [[ -n "$PACKAGE_INFO" ]]; then
            echo "$PACKAGE_INFO" | jq -r '.packages[] | "- \(.name): \(.url)"'
            echo ""
            echo "Checksums and build metadata are also available in the release."
          else
            echo "Package information not available"
          fi